# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.slugger_to_lower: true

services:

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # argument pour le service de slug
    App\Service\MySlugger:
        arguments:
            $toLower: '%app.slugger_to_lower%'

    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
    
    App\EventListener\MusicListener:
        tags:
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant update
                event: preUpdate
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Music
                # method attribute is optional
                method: updateMusic
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant création
                event: prePersist
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Music
                # method attribute is optional
                method: updateMusic

    App\EventListener\UserListener:
        tags:
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant update
                event: preUpdate
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\User
                # method attribute is optional
                method: updateUser
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant création
                event: prePersist
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\User
                # method attribute is optional
                method: updateUser

    App\EventListener\PlaylistListener:
        tags:
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant update
                event: preUpdate
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Playlist
                # method attribute is optional
                method: updatePlaylist
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant création
                event: prePersist
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Playlist
                # method attribute is optional
                method: updatePlaylist
    
    App\EventListener\GenreListener:
        tags:
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant update
                event: preUpdate
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Genre
                # method attribute is optional
                method: updateGenre
            -
                # le nom du type d'évènement, dans notre cas, un évènement doctrine entity listener
                name: doctrine.orm.entity_listener
                # le nom de l'event : avant création
                event: prePersist
                # l'entity sur laquelle on veut être notifier
                entity: App\Entity\Genre
                # method attribute is optional
                method: updateGenre
